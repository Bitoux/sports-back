<?php

namespace AppBundle\Controller;

use AppBundle\Entity\ProEvent;
use AppBundle\Entity\Company;
use FOS\RestBundle\Controller\Annotations as Rest;
use FOS\RestBundle\Request\ParamFetcher;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Validator\ConstraintViolationList;
use AppBundle\Exception\ResourceValidationException;

class ProEventController extends BaseController
{
    
    /**
	 * @Rest\Get("/proevents/{id}/single", name="proevents_single")
	 * @Rest\View(StatusCode = 200)
	 *
	 */
	public function getProEventSingle($id)
	{

        $proEvent = $this->getProEventRepository()->find($id);
        if(isset($proEvent)){
            return $proEvent;
        }else{
            return "KO";
        }
		

    }
    
    /**
     * @Rest\Post("/proevents/edit", name="edit_proevent")
     * @Rest\View(StatusCode = 200)
     */
    public function editProEvent(Request $request){
        $name = $request->get('name'); 
        $description = $request->get('description'); 
        $address = $request->get('address'); 
        $lat = $request->get('lat'); 
        $lng = $request->get('lng'); 
        $date = $request->get('date'); 
        $hour = $request->get('hour'); 
        $img = $request->files->get('img');
        $companyID = $request->get('company');
        $changed = $request->get('changed');
        $id = $request->get('id');

        $proEvent = $this->getProEventRepository()->find($id);

        $proEvent->setName($name);
        $proEvent->setDescription($description);
        $proEvent->setAddress($address);
        $proEvent->setLat($lat);
        $proEvent->setLong($lng);
        $proEvent->setDate($date);
        $proEvent->setHour($hour);

        $company = $this->getCompanyRepository()->find($companyID);

        if($changed){
            $fileName = $this->generateUniqueFileName() . '.' . $img->guessExtension();

            $img->move(
                $this->getParameter('company_directory'),
                $fileName
            );
            $proEvent->setPicture($fileName);
        }

        $this->getDoctrine()->getManager()->persist($proEvent);
        $this->getDoctrine()->getManager()->flush();

        return $company->getUser();

    }

    /**
     * @Rest\Post("/proevents/create", name="create_proevent")
     * @Rest\View(StatusCode = 200)
     */
    public function createProEvent(Request $request){
        $name = $request->get('name'); 
        $description = $request->get('description'); 
        $address = $request->get('address'); 
        $lat = $request->get('lat'); 
        $lng = $request->get('lng'); 
        $date = $request->get('date'); 
        $hour = $request->get('hour'); 
        $img = $request->files->get('img');
        $companyID = $request->get('company');


        $proEvent = new ProEvent();

        $proEvent->setName($name);
        $proEvent->setDescription($description);
        $proEvent->setAddress($address);
        $proEvent->setLat($lat);
        $proEvent->setLong($lng);
        $proEvent->setDate($date);
        $proEvent->setHour($hour);

        $company = $this->getCompanyRepository()->find($companyID);

        $proEvent->setCompany($company);


        $fileName = $this->generateUniqueFileName() . '.' . $img->guessExtension();

        $img->move(
            $this->getParameter('company_directory'),
            $fileName
        );

        $proEvent->setPicture($fileName);

        $this->getDoctrine()->getManager()->persist($proEvent);
        $this->getDoctrine()->getManager()->flush();

        return $company->getUser();

    }


    /**
	 * @Rest\Delete("/proevents/{id}/delete")
	 * @Rest\View
	 * @param $id
	 * @return JsonResponse
	 */
	public function deleteSpot($id){
		$proEvent = $this->getProEventRepository()->find($id);
		$this->getDoctrine()->getManager()->remove($proEvent);
		$this->getDoctrine()->getManager()->flush();

		return new JsonResponse(array("status" => 200));
	}

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }



}